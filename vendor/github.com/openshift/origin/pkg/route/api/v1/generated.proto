
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.openshift.origin.pkg.route.api.v1;

import "k8s.io/kubernetes/pkg/api/unversioned/generated.proto";
import "k8s.io/kubernetes/pkg/api/v1/generated.proto";
import "k8s.io/kubernetes/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// Route encapsulates the inputs needed to connect an alias to endpoints.
message Route {
  // Standard object's metadata.
  optional k8s.io.kubernetes.pkg.api.v1.ObjectMeta metadata = 1;

  // Spec is the desired state of the route
  optional RouteSpec spec = 2;

  // Status is the current state of the route
  optional RouteStatus status = 3;
}

// RouteIngress holds information about the places where a route is exposed
message RouteIngress {
  // Host is the host string under which the route is exposed; this value is required
  optional string host = 1;

  // Name is a name chosen by the router to identify itself; this value is required
  optional string routerName = 2;

  // Conditions is the state of the route, may be empty.
  repeated RouteIngressCondition conditions = 3;
}

// RouteIngressCondition contains details for the current condition of this pod.
// TODO: add LastTransitionTime, Reason, Message to match NodeCondition api.
message RouteIngressCondition {
  // Type is the type of the condition.
  // Currently only Ready.
  optional string type = 1;

  // Status is the status of the condition.
  // Can be True, False, Unknown.
  optional string status = 2;

  // (brief) reason for the condition's last transition, and is usually a machine and human
  // readable constant
  optional string reason = 3;

  // Human readable message indicating details about last transition.
  optional string message = 4;

  // RFC 3339 date and time when this condition last transitioned
  optional k8s.io.kubernetes.pkg.api.unversioned.Time lastTransitionTime = 5;
}

// RouteList is a collection of Routes.
message RouteList {
  // Standard object's metadata.
  optional k8s.io.kubernetes.pkg.api.unversioned.ListMeta metadata = 1;

  // Items is a list of routes
  repeated Route items = 2;
}

// RoutePort defines a port mapping from a router to an endpoint in the service endpoints.
message RoutePort {
  // The target port on pods selected by the service this route points to.
  // If this is a string, it will be looked up as a named port in the target
  // endpoints port list. Required
  optional k8s.io.kubernetes.pkg.util.intstr.IntOrString targetPort = 1;
}

// RouteSpec describes the route the user wishes to exist.
message RouteSpec {
  // Host is an alias/DNS that points to the service. Optional
  // Must follow DNS952 subdomain conventions.
  optional string host = 1;

  // Path that the router watches for, to route traffic for to the service. Optional
  optional string path = 2;

  // To is an object the route points to. Only the Service kind is allowed, and it will
  // be defaulted to Service.
  optional RouteTargetReference to = 3;

  // AlternateBackends is an extension of the 'to' field. If more than one service needs to be
  // pointed to, then use this field. Use the weight field in RouteTargetReference object
  // to specify relative preference
  repeated RouteTargetReference alternateBackends = 4;

  // If specified, the port to be used by the router. Most routers will use all
  // endpoints exposed by the service by default - set this value to instruct routers
  // which port to use.
  optional RoutePort port = 5;

  // TLS provides the ability to configure certificates and termination for the route
  optional TLSConfig tls = 6;
}

// RouteStatus provides relevant info about the status of a route, including which routers
// acknowledge it.
message RouteStatus {
  // Ingress describes the places where the route may be exposed. The list of
  // ingress points may contain duplicate Host or RouterName values. Routes
  // are considered live once they are `Ready`
  repeated RouteIngress ingress = 1;
}

// RouteTargetReference specifies the target that resolve into endpoints. Only the 'Service'
// kind is allowed. Use 'weight' field to emphasize one over others.
message RouteTargetReference {
  // The kind of target that the route is referring to. Currently, only 'Service' is allowed
  optional string kind = 1;

  // Name of the service/target that is being referred to. e.g. name of the service
  optional string name = 2;

  // Weight as an integer between 1 and 256 that specifies the target's relative weight
  // against other target reference objects
  optional int32 weight = 3;
}

// RouterShard has information of a routing shard and is used to
// generate host names and routing table entries when a routing shard is
// allocated for a specific route.
// Caveat: This is WIP and will likely undergo modifications when sharding
//         support is added.
message RouterShard {
  // ShardName uniquely identifies a router shard in the "set" of
  // routers used for routing traffic to the services.
  optional string shardName = 1;

  // DNSSuffix for the shard ala: shard-1.v3.openshift.com
  optional string dnsSuffix = 2;
}

// TLSConfig defines config used to secure a route and provide termination
message TLSConfig {
  // Termination indicates termination type.
  optional string termination = 1;

  // Certificate provides certificate contents
  optional string certificate = 2;

  // Key provides key file contents
  optional string key = 3;

  // CACertificate provides the cert authority certificate contents
  optional string caCertificate = 4;

  // DestinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt
  // termination this file should be provided in order to have routers use it for health checks on the secure connection
  optional string destinationCACertificate = 5;

  // InsecureEdgeTerminationPolicy indicates the desired behavior for
  // insecure connections to an edge-terminated route:
  //   disable, allow or redirect
  optional string insecureEdgeTerminationPolicy = 6;
}

